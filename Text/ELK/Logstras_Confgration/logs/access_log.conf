input {
    file {
         path => "C:/ARUN/Practics/Text/ELK/Logstras_Confgration/access_log"
         start_position => "beginning"
    }
}

filter {
    # Generated by ChatGpt
    # grok {
    #     match => {
    #         "message" => "%{IP:client} - - \[%{HTTPDATE:timestamp}\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} (?:%{NUMBER:response_bytes}|-) \"%{DATA:referrer}\" \"%{DATA:user_agent}\""
    #         # Here's what each part does:
    #             # %{IP:client}: Matches the client IP address and assigns it to the field client.
    #             # \[: Matches the opening square bracket [.
    #             # %{HTTPDATE:timestamp}: Matches the timestamp in HTTP date format (e.g., 30/Apr/2017:04:28:11 +0000) and assigns it to the field timestamp.
    #             # \]: Matches the closing square bracket ].
    #             # "(?:%{WORD:method} %{DATA:request} HTTP/%{NUMBER:http_version})": Matches the request line containing HTTP method, request path, and HTTP version. It captures the HTTP method in the field method, the request path in the field request, and the HTTP version in the field http_version.
    #             # %{NUMBER:response_code}: Matches the HTTP response code and assigns it to the field response_code.
    #             # (?:%{NUMBER:response_bytes}|-): Matches the response bytes or a hyphen - if the field is empty, and assigns it to the field response_bytes.
    #             # "%{DATA:referrer}": Matches the referrer (if available) and assigns it to the field referrer.
    #             # "%{DATA:user_agent}": Matches the user agent and assigns it to the field user_agent.
    #     }
    # }

    # date {
    #     match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
    #     target => "@timestamp"
    # }

    # Video
    grok {
        match => {
            "message" => "%{COMBINEDAPACHELOG}"           
        }
    }

    date {
        match => [
            "timestamp",
            "dd/MMM/yyyy:HH:mm:ss Z"
        ]
    }
}

output {
    elasticsearch {
        hosts => ["localhost:9200"]
        index => "access_log"
        user => "arunpatel"
        password => "arunpatel"
        ssl => true
        ssl_certificate_verification => false
    }

    stdout {
        codec => rubydebug
    }
}